swagger: "2.0"
info:
  title: API Interface
  description: beego 实现的API方法
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /book_info/recommend:
    get:
      tags:
      - book_info
      description: create books
      operationId: BookController.获取推荐书籍信息
      parameters:
      - in: header
        name: token
        description: The token is required
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.BookInfo'
        "400":
          description: token验证失败
        "403":
          description: body is empty
  /book_info/today:
    get:
      tags:
      - book_info
      description: create books
      operationId: BookController.首页展示信息
      parameters:
      - in: header
        name: token
        description: The token is required
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.BookInfo'
        "400":
          description: token验证失败
        "403":
          description: body is empty
  /public/picture/{img}:
    get:
      tags:
      - public
      description: 图片裁剪
      operationId: PublicController.公共的一些api
      parameters:
      - in: query
        name: width
        description: 宽度
        type: integer
        format: int64
      - in: query
        name: height
        description: 高度
        type: integer
        format: int64
      - in: path
        name: img
        description: 6Co6W3DogOqW6TxwDp8Vb.jpg
        required: true
        type: string
      responses:
        "200":
          description: 获取图片成功
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.SiteAppUser'
      responses:
        "200":
          description: '{int} models.SiteAppUser.Id'
        "403":
          description: body is empty
  /user/{uid}:
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.SiteAppUser'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.SiteAppUser'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    post:
      tags:
      - user
      description: 登录获取token username:admin password:123456
      operationId: UserController.Login
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.LoginInfo'
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /user/user_info:
    get:
      tags:
      - user
      description: 验证token
      operationId: UserController.valid token
      parameters:
      - in: header
        name: token
        description: The token is required
        required: true
        type: string
      responses:
        "200":
          description: '{struct} {"name":"admin","id":"125"}'
definitions:
  models.BookInfo:
    title: BookInfo
    type: object
  models.LoginInfo:
    title: LoginInfo
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.SiteAppUser:
    title: SiteAppUser
    type: object
    properties:
      createdAt:
        type: string
        format: datetime
      email:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      nickname:
        type: string
      password:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
        format: datetime
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
tags:
- name: user
  description: |
    用户相关
- name: book_info
  description: |
    书籍信息相关
- name: public
  description: |
    公共的一些api
